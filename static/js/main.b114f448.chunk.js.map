{"version":3,"sources":["logo.png","Logocomp.js","Searchbar.js","Navigate.js","Login.js","Pagecontent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Logocomp","src","logo","className","alt","Searchbar","type","placeholder","class","Navigate","Login","to","Pagecontent","useState","cityname","setCityname","onChange","e","target","value","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,kC,mKCU5BC,MANf,WACI,OACM,yBAAKC,IAAKC,IAAMC,UAAU,WAAWC,IAAI,UCQpCC,MAXf,WACE,OACE,oCACA,0BAAMF,UAAU,cAChB,2BAAOG,KAAK,OAAOC,YAAY,WAC/B,4BAAQC,MAAM,kBAAkBF,KAAK,UAArC,aCMWG,MATf,WACE,OACE,yBAAKN,UAAU,eACX,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,eCQOO,MAXf,WACE,OACI,oCACI,kBAAC,IAAD,CAAMP,UAAU,YAAYG,KAAM,QAAQK,GAAI,cAA9C,WCgBKC,MArBf,WAAwB,IAAD,EACYC,mBAAS,MADrB,mBACbC,EADa,KACHC,EADG,KAErB,OACE,yBAAKZ,UAAW,eAChB,kBAAC,EAAD,MAEA,yBAAKA,UAAU,YACb,iEAEE,0BAAMA,UAAU,gBACd,2BAAOa,SAAU,SAAAC,GAAC,OAAIF,EAAaE,EAAEC,OAAOC,QAAQb,KAAK,OAAOC,YAAY,sBAC5E,6BACA,2BAAIO,GACJ,6BACA,4BAAQN,MAAM,kBAAkBF,KAAK,UAArC,c,OCCKc,MAZf,WACE,OAEE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWb,IAC3B,kBAAC,IAAD,CAAOY,KAAK,IAAIC,UAAWV,MCAbW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.b114f448.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.f854d08a.png\";","import React from 'react';\r\nimport logo from './logo.png';\r\nimport './App.css';\r\n\r\nfunction Logocomp() {\r\n    return (\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n    );\r\n  }\r\n\r\nexport default Logocomp;\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\nfunction Searchbar() {\r\n  return (\r\n    <>\r\n    <form className=\"App-Search\">\r\n    <input type=\"text\" placeholder=\"Search\"/>\r\n    <button class=\"btn btn-success\" type=\"submit\">Search</button>\r\n    </form>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Searchbar;\r\n","import React from 'react';\r\nimport Logocomp from './Logocomp';\r\nimport Searchbar from './Searchbar';\r\nimport './App.css';\r\n\r\nfunction Navigate() {\r\n  return (\r\n    <div className=\"App-Nav-Bar\">\r\n        <Logocomp />\r\n        <Searchbar />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navigate;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {Link} from 'react-router-dom';\r\nimport './LoginPage.js';\r\n\r\n\r\nfunction Login() {\r\n  return (\r\n      <>\r\n          <Link className=\"Login-btn\" type =\"login\" to ='/LoginPage'>\r\n            Login\r\n          </Link>\r\n      </>\r\n  );\r\n}\r\n\r\n\r\nexport default Login;\r\n","import React, {useState} from 'react';\r\nimport Login from './Login';\r\nimport './App.css';\r\n\r\nfunction Pagecontent() {\r\n    const[cityname, setCityname] = useState(null);\r\n  return (\r\n    <div className= \"App-Content\" >\r\n    <Login />\r\n\r\n    <div className=\"App-Main\">\r\n      <h3>What is the weather like in . . .</h3>\r\n\r\n        <form className=\"App-City-Btn\">\r\n          <input onChange={e => setCityname( e.target.value)} type=\"text\" placeholder=\"Enter a City here\"/>\r\n          <br></br>\r\n          <h>{cityname}</h>\r\n          <br></br>\r\n          <button class=\"btn btn-success\" type=\"submit\">Submit</button>\r\n        </form>\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Pagecontent;\r\n","import React, { useState } from 'react';\nimport Navigate from './Navigate';\nimport Pagecontent from './Pagecontent';\nimport './App.css';\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\n\n\nfunction App() {\n  return (\n    \n    <Router>\n      <Route path='/' component={Navigate}/>\n      <Route path='/' component={Pagecontent}/>\n    </Router>\n    \n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}